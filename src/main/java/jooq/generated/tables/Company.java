/**
 * This class is generated by jOOQ
 */
package jooq.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.CompanyRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Company extends TableImpl<CompanyRecord> {

	private static final long serialVersionUID = -1899695403;

	/**
	 * The reference instance of <code>public.company</code>
	 */
	public static final Company COMPANY = new Company();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CompanyRecord> getRecordType() {
		return CompanyRecord.class;
	}

	/**
	 * The column <code>public.company.company_id</code>.
	 */
	public final TableField<CompanyRecord, Long> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.company.name</code>.
	 */
	public final TableField<CompanyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.company.description</code>.
	 */
	public final TableField<CompanyRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.company.website_url</code>.
	 */
	public final TableField<CompanyRecord, String> WEBSITE_URL = createField("website_url", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.company.total_employees</code>.
	 */
	public final TableField<CompanyRecord, Integer> TOTAL_EMPLOYEES = createField("total_employees", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.company.industry</code>.
	 */
	public final TableField<CompanyRecord, String> INDUSTRY = createField("industry", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.company.founded_date</code>.
	 */
	public final TableField<CompanyRecord, Date> FOUNDED_DATE = createField("founded_date", org.jooq.impl.SQLDataType.DATE, this, "");

	/**
	 * The column <code>public.company.location_id</code>.
	 */
	public final TableField<CompanyRecord, Integer> LOCATION_ID = createField("location_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.company.image_id</code>.
	 */
	public final TableField<CompanyRecord, Integer> IMAGE_ID = createField("image_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>public.company</code> table reference
	 */
	public Company() {
		this("company", null);
	}

	/**
	 * Create an aliased <code>public.company</code> table reference
	 */
	public Company(String alias) {
		this(alias, COMPANY);
	}

	private Company(String alias, Table<CompanyRecord> aliased) {
		this(alias, aliased, null);
	}

	private Company(String alias, Table<CompanyRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<CompanyRecord, Long> getIdentity() {
		return Keys.IDENTITY_COMPANY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CompanyRecord> getPrimaryKey() {
		return Keys.COMPANY_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CompanyRecord>> getKeys() {
		return Arrays.<UniqueKey<CompanyRecord>>asList(Keys.COMPANY_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<CompanyRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<CompanyRecord, ?>>asList(Keys.COMPANY__COMPANY_LOCATION_LOCATION_ID_FK, Keys.COMPANY__COMPANY_IMAGE_IMAGE_ID_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Company as(String alias) {
		return new Company(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Company rename(String name) {
		return new Company(name, null);
	}
}
