/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.Indexes;
import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.MlbTeamRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MlbTeam extends TableImpl<MlbTeamRecord> {

    private static final long serialVersionUID = -1975682843;

    /**
     * The reference instance of <code>public.mlb_team</code>
     */
    public static final MlbTeam MLB_TEAM = new MlbTeam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MlbTeamRecord> getRecordType() {
        return MlbTeamRecord.class;
    }

    /**
     * The column <code>public.mlb_team.id</code>.
     */
    public final TableField<MlbTeamRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mlb_team_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.mlb_team.mlb_team_id</code>.
     */
    public final TableField<MlbTeamRecord, Integer> MLB_TEAM_ID = createField(DSL.name("mlb_team_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mlb_team.name</code>.
     */
    public final TableField<MlbTeamRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mlb_team.code</code>.
     */
    public final TableField<MlbTeamRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mlb_team.league</code>.
     */
    public final TableField<MlbTeamRecord, String> LEAGUE = createField(DSL.name("league"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.mlb_team</code> table reference
     */
    public MlbTeam() {
        this(DSL.name("mlb_team"), null);
    }

    /**
     * Create an aliased <code>public.mlb_team</code> table reference
     */
    public MlbTeam(String alias) {
        this(DSL.name(alias), MLB_TEAM);
    }

    /**
     * Create an aliased <code>public.mlb_team</code> table reference
     */
    public MlbTeam(Name alias) {
        this(alias, MLB_TEAM);
    }

    private MlbTeam(Name alias, Table<MlbTeamRecord> aliased) {
        this(alias, aliased, null);
    }

    private MlbTeam(Name alias, Table<MlbTeamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MlbTeam(Table<O> child, ForeignKey<O, MlbTeamRecord> key) {
        super(child, key, MLB_TEAM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MLB_TEAM_ID_UINDEX, Indexes.MLB_TEAM_PK);
    }

    @Override
    public Identity<MlbTeamRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MLB_TEAM;
    }

    @Override
    public UniqueKey<MlbTeamRecord> getPrimaryKey() {
        return Keys.MLB_TEAM_PK;
    }

    @Override
    public List<UniqueKey<MlbTeamRecord>> getKeys() {
        return Arrays.<UniqueKey<MlbTeamRecord>>asList(Keys.MLB_TEAM_PK);
    }

    @Override
    public MlbTeam as(String alias) {
        return new MlbTeam(DSL.name(alias), this);
    }

    @Override
    public MlbTeam as(Name alias) {
        return new MlbTeam(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MlbTeam rename(String name) {
        return new MlbTeam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MlbTeam rename(Name name) {
        return new MlbTeam(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
