/**
 * This class is generated by jOOQ
 */
package jooq.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.PlayerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Player extends TableImpl<PlayerRecord> {

	private static final long serialVersionUID = -545577715;

	/**
	 * The reference instance of <code>public.player</code>
	 */
	public static final Player PLAYER = new Player();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PlayerRecord> getRecordType() {
		return PlayerRecord.class;
	}

	/**
	 * The column <code>public.player.player_id</code>.
	 */
	public final TableField<PlayerRecord, Integer> PLAYER_ID = createField("player_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.player.player_name</code>.
	 */
	public final TableField<PlayerRecord, String> PLAYER_NAME = createField("player_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.player.player_name_plain</code>.
	 */
	public final TableField<PlayerRecord, String> PLAYER_NAME_PLAIN = createField("player_name_plain", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.player.team_id</code>.
	 */
	public final TableField<PlayerRecord, Integer> TEAM_ID = createField("team_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.player.mlb_player_id</code>.
	 */
	public final TableField<PlayerRecord, String> MLB_PLAYER_ID = createField("mlb_player_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.player.bats</code>.
	 */
	public final TableField<PlayerRecord, String> BATS = createField("bats", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.player.birth_date</code>.
	 */
	public final TableField<PlayerRecord, Timestamp> BIRTH_DATE = createField("birth_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>public.player.height_feet</code>.
	 */
	public final TableField<PlayerRecord, Integer> HEIGHT_FEET = createField("height_feet", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.player.height_inches</code>.
	 */
	public final TableField<PlayerRecord, Integer> HEIGHT_INCHES = createField("height_inches", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.player.position</code>.
	 */
	public final TableField<PlayerRecord, String> POSITION = createField("position", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.player.throws</code>.
	 */
	public final TableField<PlayerRecord, String> THROWS = createField("throws", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.player.weight</code>.
	 */
	public final TableField<PlayerRecord, String> WEIGHT = createField("weight", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.player.birth_country</code>.
	 */
	public final TableField<PlayerRecord, String> BIRTH_COUNTRY = createField("birth_country", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.player.team_code</code>.
	 */
	public final TableField<PlayerRecord, String> TEAM_CODE = createField("team_code", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * Create a <code>public.player</code> table reference
	 */
	public Player() {
		this("player", null);
	}

	/**
	 * Create an aliased <code>public.player</code> table reference
	 */
	public Player(String alias) {
		this(alias, PLAYER);
	}

	private Player(String alias, Table<PlayerRecord> aliased) {
		this(alias, aliased, null);
	}

	private Player(String alias, Table<PlayerRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PlayerRecord, Integer> getIdentity() {
		return Keys.IDENTITY_PLAYER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PlayerRecord> getPrimaryKey() {
		return Keys.PLAYER_PLAYER_ID_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PlayerRecord>> getKeys() {
		return Arrays.<UniqueKey<PlayerRecord>>asList(Keys.PLAYER_PLAYER_ID_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<PlayerRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<PlayerRecord, ?>>asList(Keys.PLAYER__PLAYER_TEAM_TEAM_ID_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Player as(String alias) {
		return new Player(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Player rename(String name) {
		return new Player(name, null);
	}
}
