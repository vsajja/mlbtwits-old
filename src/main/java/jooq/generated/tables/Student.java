/**
 * This class is generated by jOOQ
 */
package jooq.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.StudentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Student extends TableImpl<StudentRecord> {

	private static final long serialVersionUID = -1254300355;

	/**
	 * The reference instance of <code>public.student</code>
	 */
	public static final Student STUDENT = new Student();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<StudentRecord> getRecordType() {
		return StudentRecord.class;
	}

	/**
	 * The column <code>public.student.student_id</code>.
	 */
	public final TableField<StudentRecord, Long> STUDENT_ID = createField("student_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.student.first_name</code>.
	 */
	public final TableField<StudentRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.last_name</code>.
	 */
	public final TableField<StudentRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.username</code>.
	 */
	public final TableField<StudentRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.email_address</code>.
	 */
	public final TableField<StudentRecord, String> EMAIL_ADDRESS = createField("email_address", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.last_loggedin_timestamp</code>.
	 */
	public final TableField<StudentRecord, Timestamp> LAST_LOGGEDIN_TIMESTAMP = createField("last_loggedin_timestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>public.student.employment_status</code>.
	 */
	public final TableField<StudentRecord, String> EMPLOYMENT_STATUS = createField("employment_status", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.joined_timestamp</code>.
	 */
	public final TableField<StudentRecord, Timestamp> JOINED_TIMESTAMP = createField("joined_timestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>public.student.karma</code>.
	 */
	public final TableField<StudentRecord, Integer> KARMA = createField("karma", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.student.total_views</code>.
	 */
	public final TableField<StudentRecord, Integer> TOTAL_VIEWS = createField("total_views", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.student.age</code>.
	 */
	public final TableField<StudentRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.student.gender</code>.
	 */
	public final TableField<StudentRecord, String> GENDER = createField("gender", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.salary</code>.
	 */
	public final TableField<StudentRecord, String> SALARY = createField("salary", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.relationship_status</code>.
	 */
	public final TableField<StudentRecord, String> RELATIONSHIP_STATUS = createField("relationship_status", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.dreams</code>.
	 */
	public final TableField<StudentRecord, String> DREAMS = createField("dreams", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.phone_number</code>.
	 */
	public final TableField<StudentRecord, String> PHONE_NUMBER = createField("phone_number", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.employment_history</code>.
	 */
	public final TableField<StudentRecord, String> EMPLOYMENT_HISTORY = createField("employment_history", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.skills</code>.
	 */
	public final TableField<StudentRecord, String> SKILLS = createField("skills", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.school_id</code>.
	 */
	public final TableField<StudentRecord, Integer> SCHOOL_ID = createField("school_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.student.location_id</code>.
	 */
	public final TableField<StudentRecord, Integer> LOCATION_ID = createField("location_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.student.image_id</code>.
	 */
	public final TableField<StudentRecord, Integer> IMAGE_ID = createField("image_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>public.student</code> table reference
	 */
	public Student() {
		this("student", null);
	}

	/**
	 * Create an aliased <code>public.student</code> table reference
	 */
	public Student(String alias) {
		this(alias, STUDENT);
	}

	private Student(String alias, Table<StudentRecord> aliased) {
		this(alias, aliased, null);
	}

	private Student(String alias, Table<StudentRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<StudentRecord, Long> getIdentity() {
		return Keys.IDENTITY_STUDENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<StudentRecord> getPrimaryKey() {
		return Keys.STUDENT_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<StudentRecord>> getKeys() {
		return Arrays.<UniqueKey<StudentRecord>>asList(Keys.STUDENT_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<StudentRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<StudentRecord, ?>>asList(Keys.STUDENT__STUDENT_SCHOOL_SCHOOL_ID_FK, Keys.STUDENT__STUDENT_LOCATION_LOCATION_ID_FK, Keys.STUDENT__STUDENT_IMAGE_IMAGE_ID_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Student as(String alias) {
		return new Student(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Student rename(String name) {
		return new Student(name, null);
	}
}
