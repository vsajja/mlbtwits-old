/**
 * This class is generated by jOOQ
 */
package jooq.generated.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import jooq.generated.tables.Player;
import jooq.generated.tables.records.PlayerRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerDao extends DAOImpl<PlayerRecord, jooq.generated.tables.pojos.Player, Integer> {

	/**
	 * Create a new PlayerDao without any configuration
	 */
	public PlayerDao() {
		super(Player.PLAYER, jooq.generated.tables.pojos.Player.class);
	}

	/**
	 * Create a new PlayerDao with an attached configuration
	 */
	public PlayerDao(Configuration configuration) {
		super(Player.PLAYER, jooq.generated.tables.pojos.Player.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Integer getId(jooq.generated.tables.pojos.Player object) {
		return object.getPlayerId();
	}

	/**
	 * Fetch records that have <code>player_id IN (values)</code>
	 */
	public List<jooq.generated.tables.pojos.Player> fetchByPlayerId(Integer... values) {
		return fetch(Player.PLAYER.PLAYER_ID, values);
	}

	/**
	 * Fetch a unique record that has <code>player_id = value</code>
	 */
	public jooq.generated.tables.pojos.Player fetchOneByPlayerId(Integer value) {
		return fetchOne(Player.PLAYER.PLAYER_ID, value);
	}

	/**
	 * Fetch records that have <code>name IN (values)</code>
	 */
	public List<jooq.generated.tables.pojos.Player> fetchByName(String... values) {
		return fetch(Player.PLAYER.NAME, values);
	}

	/**
	 * Fetch records that have <code>name_plain IN (values)</code>
	 */
	public List<jooq.generated.tables.pojos.Player> fetchByNamePlain(String... values) {
		return fetch(Player.PLAYER.NAME_PLAIN, values);
	}

	/**
	 * Fetch records that have <code>team_id IN (values)</code>
	 */
	public List<jooq.generated.tables.pojos.Player> fetchByTeamId(Integer... values) {
		return fetch(Player.PLAYER.TEAM_ID, values);
	}
}
