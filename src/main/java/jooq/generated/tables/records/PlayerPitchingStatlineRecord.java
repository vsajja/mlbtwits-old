/**
 * This class is generated by jOOQ
 */
package jooq.generated.tables.records;


import javax.annotation.Generated;

import jooq.generated.tables.PlayerPitchingStatline;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerPitchingStatlineRecord extends UpdatableRecordImpl<PlayerPitchingStatlineRecord> {

	private static final long serialVersionUID = -392971102;

	/**
	 * Setter for <code>public.player_pitching_statline.pitching_statline_id</code>.
	 */
	public PlayerPitchingStatlineRecord setPitchingStatlineId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.pitching_statline_id</code>.
	 */
	public Integer getPitchingStatlineId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.year</code>.
	 */
	public PlayerPitchingStatlineRecord setYear(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.year</code>.
	 */
	public Integer getYear() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.team_id</code>.
	 */
	public PlayerPitchingStatlineRecord setTeamId(Integer value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.team_id</code>.
	 */
	public Integer getTeamId() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.wins</code>.
	 */
	public PlayerPitchingStatlineRecord setWins(Integer value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.wins</code>.
	 */
	public Integer getWins() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.losses</code>.
	 */
	public PlayerPitchingStatlineRecord setLosses(Integer value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.losses</code>.
	 */
	public Integer getLosses() {
		return (Integer) getValue(4);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.era</code>.
	 */
	public PlayerPitchingStatlineRecord setEra(Double value) {
		setValue(5, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.era</code>.
	 */
	public Double getEra() {
		return (Double) getValue(5);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.games</code>.
	 */
	public PlayerPitchingStatlineRecord setGames(Integer value) {
		setValue(6, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.games</code>.
	 */
	public Integer getGames() {
		return (Integer) getValue(6);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.games_started</code>.
	 */
	public PlayerPitchingStatlineRecord setGamesStarted(Integer value) {
		setValue(7, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.games_started</code>.
	 */
	public Integer getGamesStarted() {
		return (Integer) getValue(7);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.complete_games</code>.
	 */
	public PlayerPitchingStatlineRecord setCompleteGames(Integer value) {
		setValue(8, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.complete_games</code>.
	 */
	public Integer getCompleteGames() {
		return (Integer) getValue(8);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.shutouts</code>.
	 */
	public PlayerPitchingStatlineRecord setShutouts(Integer value) {
		setValue(9, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.shutouts</code>.
	 */
	public Integer getShutouts() {
		return (Integer) getValue(9);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.complete_game_shutouts</code>.
	 */
	public PlayerPitchingStatlineRecord setCompleteGameShutouts(Integer value) {
		setValue(10, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.complete_game_shutouts</code>.
	 */
	public Integer getCompleteGameShutouts() {
		return (Integer) getValue(10);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.saves</code>.
	 */
	public PlayerPitchingStatlineRecord setSaves(Integer value) {
		setValue(11, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.saves</code>.
	 */
	public Integer getSaves() {
		return (Integer) getValue(11);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.save_opportunities</code>.
	 */
	public PlayerPitchingStatlineRecord setSaveOpportunities(Integer value) {
		setValue(12, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.save_opportunities</code>.
	 */
	public Integer getSaveOpportunities() {
		return (Integer) getValue(12);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.innings</code>.
	 */
	public PlayerPitchingStatlineRecord setInnings(Integer value) {
		setValue(13, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.innings</code>.
	 */
	public Integer getInnings() {
		return (Integer) getValue(13);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.hits</code>.
	 */
	public PlayerPitchingStatlineRecord setHits(Integer value) {
		setValue(14, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.hits</code>.
	 */
	public Integer getHits() {
		return (Integer) getValue(14);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.runs</code>.
	 */
	public PlayerPitchingStatlineRecord setRuns(Integer value) {
		setValue(15, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.runs</code>.
	 */
	public Integer getRuns() {
		return (Integer) getValue(15);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.earned_runs</code>.
	 */
	public PlayerPitchingStatlineRecord setEarnedRuns(Integer value) {
		setValue(16, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.earned_runs</code>.
	 */
	public Integer getEarnedRuns() {
		return (Integer) getValue(16);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.home_runs</code>.
	 */
	public PlayerPitchingStatlineRecord setHomeRuns(Integer value) {
		setValue(17, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.home_runs</code>.
	 */
	public Integer getHomeRuns() {
		return (Integer) getValue(17);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.hit_batsmen</code>.
	 */
	public PlayerPitchingStatlineRecord setHitBatsmen(Integer value) {
		setValue(18, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.hit_batsmen</code>.
	 */
	public Integer getHitBatsmen() {
		return (Integer) getValue(18);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.walks</code>.
	 */
	public PlayerPitchingStatlineRecord setWalks(Integer value) {
		setValue(19, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.walks</code>.
	 */
	public Integer getWalks() {
		return (Integer) getValue(19);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.intentional_walks</code>.
	 */
	public PlayerPitchingStatlineRecord setIntentionalWalks(Integer value) {
		setValue(20, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.intentional_walks</code>.
	 */
	public Integer getIntentionalWalks() {
		return (Integer) getValue(20);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.strike_outs</code>.
	 */
	public PlayerPitchingStatlineRecord setStrikeOuts(Integer value) {
		setValue(21, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.strike_outs</code>.
	 */
	public Integer getStrikeOuts() {
		return (Integer) getValue(21);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.batting_average_against</code>.
	 */
	public PlayerPitchingStatlineRecord setBattingAverageAgainst(Double value) {
		setValue(22, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.batting_average_against</code>.
	 */
	public Double getBattingAverageAgainst() {
		return (Double) getValue(22);
	}

	/**
	 * Setter for <code>public.player_pitching_statline.whip</code>.
	 */
	public PlayerPitchingStatlineRecord setWhip(Double value) {
		setValue(23, value);
		return this;
	}

	/**
	 * Getter for <code>public.player_pitching_statline.whip</code>.
	 */
	public Double getWhip() {
		return (Double) getValue(23);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached PlayerPitchingStatlineRecord
	 */
	public PlayerPitchingStatlineRecord() {
		super(PlayerPitchingStatline.PLAYER_PITCHING_STATLINE);
	}

	/**
	 * Create a detached, initialised PlayerPitchingStatlineRecord
	 */
	public PlayerPitchingStatlineRecord(Integer pitchingStatlineId, Integer year, Integer teamId, Integer wins, Integer losses, Double era, Integer games, Integer gamesStarted, Integer completeGames, Integer shutouts, Integer completeGameShutouts, Integer saves, Integer saveOpportunities, Integer innings, Integer hits, Integer runs, Integer earnedRuns, Integer homeRuns, Integer hitBatsmen, Integer walks, Integer intentionalWalks, Integer strikeOuts, Double battingAverageAgainst, Double whip) {
		super(PlayerPitchingStatline.PLAYER_PITCHING_STATLINE);

		setValue(0, pitchingStatlineId);
		setValue(1, year);
		setValue(2, teamId);
		setValue(3, wins);
		setValue(4, losses);
		setValue(5, era);
		setValue(6, games);
		setValue(7, gamesStarted);
		setValue(8, completeGames);
		setValue(9, shutouts);
		setValue(10, completeGameShutouts);
		setValue(11, saves);
		setValue(12, saveOpportunities);
		setValue(13, innings);
		setValue(14, hits);
		setValue(15, runs);
		setValue(16, earnedRuns);
		setValue(17, homeRuns);
		setValue(18, hitBatsmen);
		setValue(19, walks);
		setValue(20, intentionalWalks);
		setValue(21, strikeOuts);
		setValue(22, battingAverageAgainst);
		setValue(23, whip);
	}
}
